@Entity(name = "tb_user")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    @OneToOne(cascade = CascadeType.ALL)
    private Account account;
    @OneToOne(cascade = CascadeType.ALL)
    private Card card;
    private List<Feature> features;
    private List<News> news;


Utilizamos a annotation one to one para definir fixamente a account e o card ao
User

    @OneToMany(cascade = CascadeType.ALL)
    private List<Feature> features;
    @OneToMany(cascade = CascadeType.ALL)
    private List<News> news;

e as list com many pois serão listas


como a classe feature e news tem, basicamente, o mesmo código, criei uma 
classe abstrata com a annotation @MappedSuperClass que fará que feature e 
news extendam dessa classe.








criei também um novo package para a Repository com JPA que facilita totalmente
nosso CRUD.

package dio.apisantanderbootcamp.domain.repository;

import dio.apisantanderbootcamp.domain.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
}






configurando o application-dev.yml:

spring:
  datasource:
    url: jdbc:h2:mem:sdw2023
    username: sdw2023
    password:
  jpa:
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: create # validate / update / create /create-drop
    properties:
      hibernate:
        format_sql: true
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        trace: false
        web-allow-others: false




Hotfix no trecho `precision = 13, scale = 2`




camada de serviço

criação das packages de implementação
Na nossa camada principal defino os métodos iniciais:

public interface UserService {
    User findById(Long id);
    User create(User userToCreate);
}


na classe de implementação encapsulada defino os métodos:

public class UserServiceImpl implements UserService {
    @Override
    public User findById(Long id) {
        return null;
    }

    @Override
    public User create(User userToCreate) {
        return null;
    }
}

e definimos a annotation para ela ser tratada como um service







Controller. Camada de entrada para nossa aplicação:

primeiramente defini o rest controler e o request mapping com o endereço 
desejado
@RestController
@RequestMapping("/users")
public class UserController {
}


@RestController
@RequestMapping("/users")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/{id}")
    public ResponseEntity<User> findById(@PathVariable Long id) {
        var user = userService.findById(id);
        return ResponseEntity.ok(user);
    }

    @PostMapping
    public ResponseEntity<User> create(@RequestBody User userToCreate) {
        var userCreated = userService.create(userToCreate);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest()
                .path("/{id}")
                .buildAndExpand(userCreated.getId())
                .toUri();
        return ResponseEntity.created(location).body(userCreated);
    }
}



também instalei a dependecia do swagger para testar nossa API
	// OpenAPI
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'







Tratamento de erros;		Usamos o RestCOnrollerAdvice

package dio.apisantanderbootcamp.controller.exception;


import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {
    
}


@RestControllerAdvice
public class GlobalExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<String> handle(IllegalArgumentException businessException) {
        return new ResponseEntity<>(businessException.getMessage(), HttpStatus.UNPROCESSABLE_ENTITY);
    }

    @ExceptionHandler(NoSuchElementException.class)
    public ResponseEntity<String> handle(NoSuchElementException notFound) {
        return new ResponseEntity<>("Resource ID not found", HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(Throwable.class)
    public ResponseEntity<String> handleUnexpectedException(Throwable unexpectedException) {
        var message = "Unexpected Server Error";
        logger.error(message, unexpectedException);
        return new ResponseEntity<>(message, HttpStatus.INTERNAL_SERVER_ERROR);
    }



	




		Puublicando a API na nuvem

Depois de inicializar o Railway com o PostgreSQL, criamos um novo arquivo
yml chamado application-prod:

spring:
  datasource:
    url: jdbc:postgresql://${PGHOST}:${PGPORT}/${PGDATABASE}
    username: ${PGUSER}
    password: ${PGPASSWORD}
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate


para finalizar e subir nossa api para nuvem precisamos também alterar
o tasks.jar na build.gradle:

tasks.jar {
	manifest {
		attributes["Main-Class"] = "dio.apisantanderbootcamp.Application"
	}
}



criamos, também, na raiz do projeto um aquivo com o nome "Procfile"
vamos até o gradle -> build e rodamos o bootJar

vamos até build -> libs e colamos o endereço do arquivo .jar principal


no fim, o Procfile ficará assim:
web: java -jar build/libs/api-santander-bootcamp-0.0.1-SNAPSHOT.jar


depois, precisamod atualizar as varivaveis no postgree:
settings -> 

PGDATABASE=railway;PGHOST=containers-us-west-207.railway.app;PGPASSWORD=AWJvkOBgOFRUWhWra3Oh;PGPORT=5579;PGUSER=postgres;SPRING_PROFILES_ACTIVE=prd

no fim, ficará assim:

PORT=8080
PGDATABASE=railway;
PGHOST=containers-us-west-207.railway.app;
PGPASSWORD=AWJvkOBgOFRUWhWra3Oh;
PGPORT=5579;
PGUSER=postgres;
SPRING_PROFILES_ACTIVE=${{shared.SPRING_PROFILES_ACTIVE}}